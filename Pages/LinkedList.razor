@page "/linkedlist"

@inject LinkedListService LinkedListService
@inject IToastService toastService

<h3>Linked List <span class="badge badge-info">@LinkedListService.Count</span></h3>

<button class="btn btn-primary" @onclick="AddFirst">Add First</button>

<button class="btn btn-primary" @onclick="AddLast">Add Last</button>

<button class="btn btn-warning" @onclick="RemoveFirst">Remove First</button>

<button class="btn btn-warning" @onclick="RemoveLast">Remove Last</button>

<button class="btn btn-danger" @onclick="Clear">Clear List</button>

<div style="margin-top: 20px">
    @while (List.MoveNext())
    {
        <Node Value="@List.Current.Value" />

        if (List.Current != LinkedListService.Tail)
        {
            <Line />
        }
    }
</div>


@code {
    private IEnumerator<LinkedListNode> List { get; set; }

    private void AddFirst()
    {
        LinkedListService.AddFirst(new Random().Next(100));

        toastService.ShowToast(ToastLevel.Info, "Added number " + LinkedListService.Head.Value + " on the first position.");

        UpdateList();
    }

    private void AddLast()
    {
        LinkedListService.AddLast(new Random().Next(100));

        toastService.ShowToast(ToastLevel.Info, "Added number " + LinkedListService.Tail.Value + " on the last position.");

        UpdateList();
    }

    private void RemoveFirst()
    {
        if (LinkedListService.Count != 0)
        {
            toastService.ShowWarning("Removed number " + LinkedListService.RemoveFirst() + " from the first position.", "Info");
            UpdateList();
        }
    }

    private void RemoveLast()
    {
        if (LinkedListService.Count != 0)
        {
            toastService.ShowWarning("Removed number " + LinkedListService.RemoveLast() + " from the last position.", "Info");
            UpdateList();
        }
    }

    private void Clear()
    {
        if (LinkedListService.Count != 0)
        {
            LinkedListService.Clear();
            toastService.ShowError("Linked list cleared", "Info");
            UpdateList();
        }
    }

    private void UpdateList()
    {
        List = LinkedListService.GetEnumerator();
    }

    protected override void OnInitialized()
    {
        UpdateList();
    }
}